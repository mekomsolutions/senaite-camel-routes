<routes xmlns="http://camel.apache.org/schema/spring">
    <route id="inbound-lims" errorHandlerRef="deadLetterChannelBuilder">
        <from uri="scheduler:taskUpdate?initialDelay=10000&amp;delay=10000" />
        
        <log message="Sheduled FHIR Task status updater " />

        <!-- Fetch requested & accepted  orders to transition each to either accepted, rejected or completed-->
        <to uri="direct:openmrs-authenticate"/>

        <setHeader name="CamelHttpMethod">
            <constant>GET</constant>
        </setHeader>

        <toD cacheSize="-1" uri="{{openmrs.baseUrl}}/ws/fhir2/R4/Task?status=requested,accepted"/>
        <unmarshal>
            <json library="Jackson"/>
        </unmarshal>

        <choice>
            <!-- Process Tasks status if tasks are present -->
            <when>
                <jsonpath>$.[?(@.total>0)]</jsonpath>

                <setBody>
                    <jsonpath>$.entry</jsonpath>
                </setBody>

                <split streaming="false">
                    <simple>${body}</simple>

                    <choice>
                        <!--- Only process a Task that monitors a ServiceRequest -->
                        <when>
                            <jsonpath>$.[?(@.resource.basedOn[0].type == 'ServiceRequest')]</jsonpath>

                            <setProperty name="task-id">
                                <jsonpath>$.resource.id</jsonpath>
                            </setProperty>

                            <setProperty name="service-request-id">
                                <jsonpath>$.resource.basedOn[0].reference</jsonpath>
                            </setProperty>

                            <setProperty name="service-request-current-status">
                                <jsonpath>$.resource.status</jsonpath>
                            </setProperty> 

                            <!-- Retrieving associated ServiceRequest -->

                            <toD cacheSize="-1" uri="{{openmrs.baseUrl}}/ws/fhir2/R4/ServiceRequest/${exchangeProperty.service-request-id}?throwExceptionOnFailure=false"/>
                            <unmarshal>
                                <json library="Jackson"/>
                            </unmarshal>
                            
                            <choice>
                                <!-- Transition FHIR Task to 'rejected' if Associated ServiceRequest was voided/deleted or deleted-->
                                <when>
                                    <jsonpath>$.[?((@.issue &amp;&amp; @.issue[0].diagnostics contains 'is gone/deleted') || (@.issue &amp;&amp; @.issue[0].diagnostics contains 'is not known'))] </jsonpath>

                                    <setHeader name="CamelHttpMethod">
                                        <constant>PUT</constant>
                                    </setHeader>

                                    <setBody>
                                        <simple>{"resourceType": "Task", "id": "${exchangeProperty.task-id}", "status": "rejected", "intent": "order"}</simple>
                                    </setBody>

                                    <toD cacheSize="-1" uri="{{openmrs.baseUrl}}/ws/fhir2/R4/Task/${exchangeProperty.task-id}"/>
                                    <log message="Updated FHIR Task :  '${body}'"/>
                                </when>
                                <!-- Associated ServiceRequest to Task actually exists -->
                                <when>
                                    <jsonpath>$.[?(@.resourceType &amp;&amp; @.resourceType == 'ServiceRequest')] </jsonpath>
        
                                    <setProperty name="service-request-concept-uuid">
                                        <jsonpath>$.code.coding[0].code</jsonpath>
                                    </setProperty>
        
                                    <setProperty name="service-request-encounter-reference">
                                        <jsonpath resultType="String">$.encounter.reference</jsonpath>
                                    </setProperty>
                                    <setProperty name="service-request-encounter-reference">
                                        <simple>${exchangeProperty.service-request-encounter-reference.substring(10)}</simple>
                                    </setProperty>
        
                                    <setProperty name="service-request-requester">
                                        <jsonpath resultType="String">$.requester.reference</jsonpath>
                                    </setProperty>
                                    <setProperty name="service-request-requester">
                                        <simple>${exchangeProperty.service-request-requester.substring(13)}</simple>
                                    </setProperty>
        
                                    <setProperty name="patient-uuid">
                                        <jsonpath resultType="String">$.subject.reference</jsonpath>
                                    </setProperty>
                                    <setProperty name="patient-uuid">
                                        <simple>${exchangeProperty.patient-uuid.substring(8)}</simple>
                                    </setProperty>
        
                                    <!---retrieving associated location and visit-->
        
                                    <toD cacheSize="-1" uri="{{openmrs.baseUrl}}/ws/rest/v1/encounter/${exchangeProperty.service-request-encounter-reference}"/>
                                    <unmarshal>
                                        <json library="Jackson"/>
                                    </unmarshal>
        
                                    <setProperty name="service-request-location-uuid">
                                        <jsonpath>$.location.uuid</jsonpath>
                                    </setProperty>
        
                                    <setProperty name="service-request-visit-uuid">
                                        <jsonpath>$.visit.uuid</jsonpath>
                                    </setProperty>
        
                                    <setProperty name="service-request-encounter-datetime">
                                        <jsonpath>$.encounterDatetime</jsonpath>
                                    </setProperty> 
        
                                    <!---retrieving equivalent analysis-request from senaite -->
        
                                    <to uri="direct:senaite-authenticate"/>

                                    <setHeader name="CamelHttpMethod">
                                        <constant>GET</constant>
                                    </setHeader>
                                    <setHeader name="Content-Type">
                                        <constant>application/json</constant>
                                    </setHeader>
        
                                    <toD cacheSize="-1" uri="{{senaite.baseUrl}}/@@API/senaite/v1/search?getClientSampleID=${exchangeProperty.service-request-id}&amp;getClientID=${exchangeProperty.patient-uuid}&amp;catalog=bika_catalog_analysisrequest_listing&amp;complete=true"/>
                                    <unmarshal>
                                        <json library="Jackson"/>
                                    </unmarshal>
        
                                    <choice>
                                        <!---only update ServiceRequest status for which an equivalent Analysis Request was created on Senaite -->
                                        <when>
                                            <jsonpath>$.[?(@.items[0].review_state=='sample_due')]</jsonpath>
                                            <setProperty name="service-request-transitioned-status">
                                                <simple>requested</simple>
                                            </setProperty> 
                                        </when>
                                        <when>
                                            <jsonpath>$.[?(@.items[0].review_state=='sample_received')]</jsonpath>
                                            <setProperty name="service-request-transitioned-status">
                                                <simple>accepted</simple>
                                            </setProperty>
                                        </when>
                                        <when>
                                            <jsonpath>$.[?(@.items[0].review_state=='published')]</jsonpath>
                                            <setProperty name="service-request-transitioned-status">
                                                <simple>completed</simple>
                                            </setProperty>
                                        </when>
                                        <when>
                                            <jsonpath>$.[?(@.items[0].review_state=='cancelled')]</jsonpath>
                                            <setProperty name="service-request-transitioned-status">
                                                <simple>rejected</simple>
                                            </setProperty>
                                        </when>
                                    </choice>
        
                                    <setProperty name="service-request-tests">
                                        <jsonpath>$.items[0].Analyses</jsonpath>
                                    </setProperty>
        
                                    <setProperty name="number-of-service-request-tests">
                                        <jsonpath>$.items[0].Analyses.length()</jsonpath>
                                    </setProperty>
        
                                    <choice>
                                        <!---to only update Task status if it is valid(not null - happens if the associated ServiceRequest was never created on senaite) and has actually changed -->
                                        <when>
                                            <simple>${exchangeProperty.service-request-current-status} != null &amp;&amp; ${exchangeProperty.service-request-transitioned-status} != null &amp;&amp; ${exchangeProperty.service-request-current-status} != ${exchangeProperty.service-request-transitioned-status}</simple>
        
                                            <to uri="direct:openmrs-authenticate"/>
        
                                            <setHeader name="CamelHttpMethod">
                                                <constant>PUT</constant>
                                            </setHeader>
        
                                            <setBody>
                                                <simple>{"resourceType": "Task", "id": "${exchangeProperty.task-id}", "status": "${exchangeProperty.service-request-transitioned-status}", "intent": "order"}</simple>
                                            </setBody>
        
                                            <toD cacheSize="-1" uri="{{openmrs.baseUrl}}/ws/fhir2/R4/Task/${exchangeProperty.task-id}"/>
        
                                        </when>
                                    </choice>
        
                                    <choice>
                                        <!---to create lab results once the ServiceRequest is completed -->
                                        <when>
                                            <simple>${exchangeProperty.service-request-transitioned-status} != null &amp;&amp; ${exchangeProperty.service-request-transitioned-status} == 'completed'</simple>
        
                                            <to uri="direct:openmrs-authenticate"/>
                                            
                                            <setHeader name="CamelHttpMethod">
                                                <constant>GET</constant>
                                            </setHeader>
        
                                            <toD cacheSize="-1" uri="{{openmrs.baseUrl}}/ws/rest/v1/encounter?encounterType={{results.encounterType.uuid}}&amp;patient=${exchangeProperty.patient-uuid}&amp;v=custom:(uuid,encounterDatetime,patient:(uuid),location:(uuid))"/>
                                            <unmarshal>
                                                <json library="Jackson"/>
                                            </unmarshal>
        
                                            <choice>
                                                <when>
                                                    <jsonpath suppressExceptions="true">$.[?(@.results)]</jsonpath>
        
                                                    <setBody>
                                                        <jsonpath>$.results</jsonpath>
                                                    </setBody>
                                                    <marshal>
                                                        <json library="Jackson"/>
                                                    </marshal>
        
                                                    <setProperty name="results-encounter-uuid">
                                                        <method beanType="net.mekomsolutions.eip.utils.JsonUtils" method="getPropertyValueWhereKeyMatchesValue(${body}, uuid, encounterDatetime, ${exchangeProperty.service-request-encounter-datetime})" />
                                                    </setProperty>
                                                </when>
                                            </choice>
        
                                            <choice>
                                                <when>
                                                    <!---Create results encounter if it does not exist -->
                                                    <simple>${exchangeProperty.results-encounter-uuid} == null || ${exchangeProperty.results-encounter-uuid} == ""</simple>
        
                                                    <setBody>
                                                        <simple>{"location": "${exchangeProperty.service-request-location-uuid}","encounterType": "{{results.encounterType.uuid}}","encounterDatetime": "${exchangeProperty.service-request-encounter-datetime}","patient": "${exchangeProperty.patient-uuid}","visit":"${exchangeProperty.service-request-visit-uuid}", "encounterProviders":[{"provider": "${exchangeProperty.service-request-requester}","encounterRole": "a0b03050-c99b-11e0-9572-0800200c9a66"}]}</simple>
                                                    </setBody>
        
                                                    <setHeader name="CamelHttpMethod">
                                                        <constant>POST</constant>
                                                    </setHeader>
        
                                                    <toD cacheSize="-1" uri="{{openmrs.baseUrl}}/ws/rest/v1/encounter"/>
                                                    <unmarshal>
                                                        <json library="Jackson"/>
                                                    </unmarshal>
        
                                                    <setProperty name="results-encounter-uuid">
                                                        <jsonpath>$.uuid</jsonpath>
                                                    </setProperty>
                                                </when>
                                            </choice>
        
                                            <setBody>
                                                <simple>${exchangeProperty.service-request-tests}</simple>
                                            </setBody>
        
                                            <!---Create result obs or results array of obs -->
        
                                            <split streaming="false" strategyRef="splitBodyConcatAggregationStrategy">
                                                <simple>${body}</simple>
        
                                                <marshal>
                                                    <json library="Jackson"/>
                                                </marshal>
        
                                                <setProperty name="analysis-api_url">
                                                    <jsonpath>$.api_url</jsonpath>
                                                </setProperty>
        
                                                <to uri="direct:senaite-authenticate"/>

                                                <setHeader name="CamelHttpMethod">
                                                    <constant>GET</constant>
                                                </setHeader>
        
                                                <toD cacheSize="-1" uri="${exchangeProperty.analysis-api_url}"/>
                                                
                                                <unmarshal>
                                                    <json library="Jackson"/>
                                                </unmarshal>
                                                
                                                <setProperty name="service-request-result">
                                                    <jsonpath>$.items[0].Result</jsonpath>
                                                </setProperty>
        
                                                <setProperty name="service-request-resultCaptureDate">
                                                    <jsonpath>$.items[0].ResultCaptureDate</jsonpath>
                                                </setProperty>
        
                                                <setBody>
                                                    <jsonpath>$.items[0].description</jsonpath>
                                                </setBody>
        
                                                <convertBodyTo type="java.lang.String"/>
        
                                                <setProperty name="start-index">
                                                    <simple>${body.indexOf("(")}++</simple>
                                                </setProperty>
        
                                                <setProperty name="last-index">
                                                    <simple>${body.indexOf(")")}</simple>
                                                </setProperty>
        
                                                <setProperty name="service-request-test-concept-uuid">
                                                    <simple>${body.substring(${exchangeProperty.start-index},${exchangeProperty.last-index})}</simple>
                                                </setProperty>
        
                                                <setBody>
                                                    <simple>{"concept":"${exchangeProperty.service-request-test-concept-uuid}","order": "${exchangeProperty.service-request-id}","person": "${exchangeProperty.patient-uuid}","obsDatetime": "${exchangeProperty.service-request-resultCaptureDate}","groupMembers":[{"concept":"${exchangeProperty.service-request-test-concept-uuid}","order": "${exchangeProperty.service-request-id}","person": "${exchangeProperty.patient-uuid}","obsDatetime": "${exchangeProperty.service-request-resultCaptureDate}","groupMembers":[{"value":"${exchangeProperty.service-request-result}","order": "${exchangeProperty.service-request-id}","person": "${exchangeProperty.patient-uuid}","obsDatetime": "${exchangeProperty.service-request-resultCaptureDate}","concept":"${exchangeProperty.service-request-test-concept-uuid}"}]}]}</simple>
                                                </setBody>
        
                                            </split>
        
                                            <convertBodyTo type="java.lang.String"/>
        
                                            <setProperty name="result-obs">
                                                <simple>${body}</simple>
                                            </setProperty>  
        
                                            <choice>
                                                <!---Create panel results obs if results are more than 1 otherwise attach encounter to test obs-->
                                                <when>
                                                    <simple>${exchangeProperty.number-of-service-request-tests} &gt; 1 </simple>
        
                                                    <setProperty name="result-obs">
                                                        <simple>{"concept":"${exchangeProperty.service-request-concept-uuid}","order": "${exchangeProperty.service-request-id}","person": "${exchangeProperty.patient-uuid}","encounter": "${exchangeProperty.results-encounter-uuid}","obsDatetime": "${exchangeProperty.service-request-resultCaptureDate}","groupMembers":[${exchangeProperty.result-obs}]}</simple>
                                                    </setProperty>
                                                </when>
                                                <otherwise>
                                                    <setProperty name="result-obs">
                                                        <simple>{"encounter": "${exchangeProperty.results-encounter-uuid}",${body.substring(1)}</simple>
                                                    </setProperty>
                                                </otherwise>
                                            </choice>

                                            <to uri="direct:openmrs-authenticate"/>

                                            <setHeader name="CamelHttpMethod">
                                                <constant>POST</constant>
                                            </setHeader>
                                            
                                            <setBody>
                                                <simple>${exchangeProperty.result-obs}</simple>
                                            </setBody>
        
                                            <toD cacheSize="-1" uri="{{openmrs.baseUrl}}/ws/rest/v1/obs"/>
        
                                        </when>
                                    </choice>
                                </when>
                                <otherwise>
                                    <log message="Something went wrong when updating FHIR Task for ServiceRequest identified by uuid: '${exchangeProperty.task-id}'"/>

                                </otherwise>
                            </choice>
                        </when>
                    </choice>
                </split>
            </when>
        </choice>
    </route>
</routes>